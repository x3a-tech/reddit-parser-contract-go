// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v4.24.4
// source: reddit-parser/reddit-parser.proto

package redditparsv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Method int32

const (
	Method_NULL              Method = 0
	Method_ADD_DATA_SOURCE   Method = 1
	Method_LIST_DATA_SOURCES Method = 2
)

// Enum value maps for Method.
var (
	Method_name = map[int32]string{
		0: "NULL",
		1: "ADD_DATA_SOURCE",
		2: "LIST_DATA_SOURCES",
	}
	Method_value = map[string]int32{
		"NULL":              0,
		"ADD_DATA_SOURCE":   1,
		"LIST_DATA_SOURCES": 2,
	}
)

func (x Method) Enum() *Method {
	p := new(Method)
	*p = x
	return p
}

func (x Method) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Method) Descriptor() protoreflect.EnumDescriptor {
	return file_reddit_parser_reddit_parser_proto_enumTypes[0].Descriptor()
}

func (Method) Type() protoreflect.EnumType {
	return &file_reddit_parser_reddit_parser_proto_enumTypes[0]
}

func (x Method) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Method.Descriptor instead.
func (Method) EnumDescriptor() ([]byte, []int) {
	return file_reddit_parser_reddit_parser_proto_rawDescGZIP(), []int{0}
}

type AddDataSourceRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to RequestType:
	//
	//	*AddDataSourceRequest_SingleSubreddit
	//	*AddDataSourceRequest_MultiSubreddit
	RequestType   isAddDataSourceRequest_RequestType `protobuf_oneof:"request_type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddDataSourceRequest) Reset() {
	*x = AddDataSourceRequest{}
	mi := &file_reddit_parser_reddit_parser_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddDataSourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDataSourceRequest) ProtoMessage() {}

func (x *AddDataSourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_reddit_parser_reddit_parser_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDataSourceRequest.ProtoReflect.Descriptor instead.
func (*AddDataSourceRequest) Descriptor() ([]byte, []int) {
	return file_reddit_parser_reddit_parser_proto_rawDescGZIP(), []int{0}
}

func (x *AddDataSourceRequest) GetRequestType() isAddDataSourceRequest_RequestType {
	if x != nil {
		return x.RequestType
	}
	return nil
}

func (x *AddDataSourceRequest) GetSingleSubreddit() string {
	if x != nil {
		if x, ok := x.RequestType.(*AddDataSourceRequest_SingleSubreddit); ok {
			return x.SingleSubreddit
		}
	}
	return ""
}

func (x *AddDataSourceRequest) GetMultiSubreddit() *SubredditList {
	if x != nil {
		if x, ok := x.RequestType.(*AddDataSourceRequest_MultiSubreddit); ok {
			return x.MultiSubreddit
		}
	}
	return nil
}

type isAddDataSourceRequest_RequestType interface {
	isAddDataSourceRequest_RequestType()
}

type AddDataSourceRequest_SingleSubreddit struct {
	SingleSubreddit string `protobuf:"bytes,1,opt,name=single_subreddit,json=singleSubreddit,proto3,oneof"`
}

type AddDataSourceRequest_MultiSubreddit struct {
	MultiSubreddit *SubredditList `protobuf:"bytes,2,opt,name=multi_subreddit,json=multiSubreddit,proto3,oneof"`
}

func (*AddDataSourceRequest_SingleSubreddit) isAddDataSourceRequest_RequestType() {}

func (*AddDataSourceRequest_MultiSubreddit) isAddDataSourceRequest_RequestType() {}

type SubredditList struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	SubredditNames []string               `protobuf:"bytes,1,rep,name=subreddit_names,json=subredditNames,proto3" json:"subreddit_names,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *SubredditList) Reset() {
	*x = SubredditList{}
	mi := &file_reddit_parser_reddit_parser_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubredditList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubredditList) ProtoMessage() {}

func (x *SubredditList) ProtoReflect() protoreflect.Message {
	mi := &file_reddit_parser_reddit_parser_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubredditList.ProtoReflect.Descriptor instead.
func (*SubredditList) Descriptor() ([]byte, []int) {
	return file_reddit_parser_reddit_parser_proto_rawDescGZIP(), []int{1}
}

func (x *SubredditList) GetSubredditNames() []string {
	if x != nil {
		return x.SubredditNames
	}
	return nil
}

type AddDataSourceResponse struct {
	state          protoimpl.MessageState                   `protogen:"open.v1"`
	Results        []*AddDataSourceResponse_SubredditResult `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	OverallSuccess bool                                     `protobuf:"varint,2,opt,name=overall_success,json=overallSuccess,proto3" json:"overall_success,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *AddDataSourceResponse) Reset() {
	*x = AddDataSourceResponse{}
	mi := &file_reddit_parser_reddit_parser_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddDataSourceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDataSourceResponse) ProtoMessage() {}

func (x *AddDataSourceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_reddit_parser_reddit_parser_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDataSourceResponse.ProtoReflect.Descriptor instead.
func (*AddDataSourceResponse) Descriptor() ([]byte, []int) {
	return file_reddit_parser_reddit_parser_proto_rawDescGZIP(), []int{2}
}

func (x *AddDataSourceResponse) GetResults() []*AddDataSourceResponse_SubredditResult {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *AddDataSourceResponse) GetOverallSuccess() bool {
	if x != nil {
		return x.OverallSuccess
	}
	return false
}

type ListDataSourcesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Limit         int32                  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset        int32                  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListDataSourcesRequest) Reset() {
	*x = ListDataSourcesRequest{}
	mi := &file_reddit_parser_reddit_parser_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListDataSourcesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDataSourcesRequest) ProtoMessage() {}

func (x *ListDataSourcesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_reddit_parser_reddit_parser_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDataSourcesRequest.ProtoReflect.Descriptor instead.
func (*ListDataSourcesRequest) Descriptor() ([]byte, []int) {
	return file_reddit_parser_reddit_parser_proto_rawDescGZIP(), []int{3}
}

func (x *ListDataSourcesRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListDataSourcesRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type ListDataSourcesResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	SubredditNames []string               `protobuf:"bytes,1,rep,name=subreddit_names,json=subredditNames,proto3" json:"subreddit_names,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ListDataSourcesResponse) Reset() {
	*x = ListDataSourcesResponse{}
	mi := &file_reddit_parser_reddit_parser_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListDataSourcesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDataSourcesResponse) ProtoMessage() {}

func (x *ListDataSourcesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_reddit_parser_reddit_parser_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDataSourcesResponse.ProtoReflect.Descriptor instead.
func (*ListDataSourcesResponse) Descriptor() ([]byte, []int) {
	return file_reddit_parser_reddit_parser_proto_rawDescGZIP(), []int{4}
}

func (x *ListDataSourcesResponse) GetSubredditNames() []string {
	if x != nil {
		return x.SubredditNames
	}
	return nil
}

type AddDataSourceResponse_SubredditResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SubredditName string                 `protobuf:"bytes,1,opt,name=subreddit_name,json=subredditName,proto3" json:"subreddit_name,omitempty"`
	Success       bool                   `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	SourceId      string                 `protobuf:"bytes,4,opt,name=source_id,json=sourceId,proto3" json:"source_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddDataSourceResponse_SubredditResult) Reset() {
	*x = AddDataSourceResponse_SubredditResult{}
	mi := &file_reddit_parser_reddit_parser_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddDataSourceResponse_SubredditResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDataSourceResponse_SubredditResult) ProtoMessage() {}

func (x *AddDataSourceResponse_SubredditResult) ProtoReflect() protoreflect.Message {
	mi := &file_reddit_parser_reddit_parser_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDataSourceResponse_SubredditResult.ProtoReflect.Descriptor instead.
func (*AddDataSourceResponse_SubredditResult) Descriptor() ([]byte, []int) {
	return file_reddit_parser_reddit_parser_proto_rawDescGZIP(), []int{2, 0}
}

func (x *AddDataSourceResponse_SubredditResult) GetSubredditName() string {
	if x != nil {
		return x.SubredditName
	}
	return ""
}

func (x *AddDataSourceResponse_SubredditResult) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *AddDataSourceResponse_SubredditResult) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *AddDataSourceResponse_SubredditResult) GetSourceId() string {
	if x != nil {
		return x.SourceId
	}
	return ""
}

var File_reddit_parser_reddit_parser_proto protoreflect.FileDescriptor

var file_reddit_parser_reddit_parser_proto_rawDesc = string([]byte{
	0x0a, 0x21, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x2d, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2f,
	0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x2d, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x73,
	0x65, 0x72, 0x22, 0x9c, 0x01, 0x0a, 0x14, 0x41, 0x64, 0x64, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x10, 0x73,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x53,
	0x75, 0x62, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x12, 0x47, 0x0a, 0x0f, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x5f, 0x73, 0x75, 0x62, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x73, 0x65,
	0x72, 0x2e, 0x53, 0x75, 0x62, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x0e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x75, 0x62, 0x72, 0x65, 0x64, 0x64, 0x69,
	0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x22, 0x38, 0x0a, 0x0d, 0x53, 0x75, 0x62, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x62,
	0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x9c, 0x02, 0x0a, 0x15,
	0x41, 0x64, 0x64, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x5f,
	0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x75, 0x62,
	0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c,
	0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x1a, 0x89,
	0x01, 0x0a, 0x0f, 0x53, 0x75, 0x62, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x75, 0x62, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x72,
	0x65, 0x64, 0x64, 0x69, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x22, 0x46, 0x0a, 0x16, 0x4c, 0x69,
	0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x22, 0x42, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a,
	0x0f, 0x73, 0x75, 0x62, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x72, 0x65, 0x64, 0x64, 0x69,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x2a, 0x3e, 0x0a, 0x06, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x12, 0x08, 0x0a, 0x04, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x44,
	0x44, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x01, 0x12,
	0x15, 0x0a, 0x11, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x53, 0x10, 0x02, 0x32, 0xd3, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x64, 0x64, 0x69,
	0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x5a,
	0x0a, 0x0d, 0x41, 0x64, 0x64, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x23, 0x2e, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e,
	0x41, 0x64, 0x64, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x5f, 0x70, 0x61,
	0x72, 0x73, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x60, 0x0a, 0x0f, 0x4c, 0x69,
	0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x25, 0x2e,
	0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x5f, 0x70, 0x61,
	0x72, 0x73, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x20, 0x5a, 0x1e,
	0x78, 0x33, 0x61, 0x2e, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x2d, 0x70, 0x61, 0x72, 0x73, 0x65,
	0x72, 0x3b, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x70, 0x61, 0x72, 0x73, 0x76, 0x31, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_reddit_parser_reddit_parser_proto_rawDescOnce sync.Once
	file_reddit_parser_reddit_parser_proto_rawDescData []byte
)

func file_reddit_parser_reddit_parser_proto_rawDescGZIP() []byte {
	file_reddit_parser_reddit_parser_proto_rawDescOnce.Do(func() {
		file_reddit_parser_reddit_parser_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_reddit_parser_reddit_parser_proto_rawDesc), len(file_reddit_parser_reddit_parser_proto_rawDesc)))
	})
	return file_reddit_parser_reddit_parser_proto_rawDescData
}

var file_reddit_parser_reddit_parser_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_reddit_parser_reddit_parser_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_reddit_parser_reddit_parser_proto_goTypes = []any{
	(Method)(0),                                   // 0: reddit_parser.Method
	(*AddDataSourceRequest)(nil),                  // 1: reddit_parser.AddDataSourceRequest
	(*SubredditList)(nil),                         // 2: reddit_parser.SubredditList
	(*AddDataSourceResponse)(nil),                 // 3: reddit_parser.AddDataSourceResponse
	(*ListDataSourcesRequest)(nil),                // 4: reddit_parser.ListDataSourcesRequest
	(*ListDataSourcesResponse)(nil),               // 5: reddit_parser.ListDataSourcesResponse
	(*AddDataSourceResponse_SubredditResult)(nil), // 6: reddit_parser.AddDataSourceResponse.SubredditResult
}
var file_reddit_parser_reddit_parser_proto_depIdxs = []int32{
	2, // 0: reddit_parser.AddDataSourceRequest.multi_subreddit:type_name -> reddit_parser.SubredditList
	6, // 1: reddit_parser.AddDataSourceResponse.results:type_name -> reddit_parser.AddDataSourceResponse.SubredditResult
	1, // 2: reddit_parser.RedditSourceManager.AddDataSource:input_type -> reddit_parser.AddDataSourceRequest
	4, // 3: reddit_parser.RedditSourceManager.ListDataSources:input_type -> reddit_parser.ListDataSourcesRequest
	3, // 4: reddit_parser.RedditSourceManager.AddDataSource:output_type -> reddit_parser.AddDataSourceResponse
	5, // 5: reddit_parser.RedditSourceManager.ListDataSources:output_type -> reddit_parser.ListDataSourcesResponse
	4, // [4:6] is the sub-list for method output_type
	2, // [2:4] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_reddit_parser_reddit_parser_proto_init() }
func file_reddit_parser_reddit_parser_proto_init() {
	if File_reddit_parser_reddit_parser_proto != nil {
		return
	}
	file_reddit_parser_reddit_parser_proto_msgTypes[0].OneofWrappers = []any{
		(*AddDataSourceRequest_SingleSubreddit)(nil),
		(*AddDataSourceRequest_MultiSubreddit)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_reddit_parser_reddit_parser_proto_rawDesc), len(file_reddit_parser_reddit_parser_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_reddit_parser_reddit_parser_proto_goTypes,
		DependencyIndexes: file_reddit_parser_reddit_parser_proto_depIdxs,
		EnumInfos:         file_reddit_parser_reddit_parser_proto_enumTypes,
		MessageInfos:      file_reddit_parser_reddit_parser_proto_msgTypes,
	}.Build()
	File_reddit_parser_reddit_parser_proto = out.File
	file_reddit_parser_reddit_parser_proto_goTypes = nil
	file_reddit_parser_reddit_parser_proto_depIdxs = nil
}
