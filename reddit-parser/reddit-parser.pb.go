// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v4.24.4
// source: reddit-parser/reddit-parser.proto

package redditparsv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Method int32

const (
	Method_NULL            Method = 0
	Method_ADD_DATA_SOURCE Method = 1
)

// Enum value maps for Method.
var (
	Method_name = map[int32]string{
		0: "NULL",
		1: "ADD_DATA_SOURCE",
	}
	Method_value = map[string]int32{
		"NULL":            0,
		"ADD_DATA_SOURCE": 1,
	}
)

func (x Method) Enum() *Method {
	p := new(Method)
	*p = x
	return p
}

func (x Method) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Method) Descriptor() protoreflect.EnumDescriptor {
	return file_reddit_parser_reddit_parser_proto_enumTypes[0].Descriptor()
}

func (Method) Type() protoreflect.EnumType {
	return &file_reddit_parser_reddit_parser_proto_enumTypes[0]
}

func (x Method) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Method.Descriptor instead.
func (Method) EnumDescriptor() ([]byte, []int) {
	return file_reddit_parser_reddit_parser_proto_rawDescGZIP(), []int{0}
}

type AddDataSourceRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SubredditName string                 `protobuf:"bytes,1,opt,name=subreddit_name,json=subredditName,proto3" json:"subreddit_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddDataSourceRequest) Reset() {
	*x = AddDataSourceRequest{}
	mi := &file_reddit_parser_reddit_parser_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddDataSourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDataSourceRequest) ProtoMessage() {}

func (x *AddDataSourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_reddit_parser_reddit_parser_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDataSourceRequest.ProtoReflect.Descriptor instead.
func (*AddDataSourceRequest) Descriptor() ([]byte, []int) {
	return file_reddit_parser_reddit_parser_proto_rawDescGZIP(), []int{0}
}

func (x *AddDataSourceRequest) GetSubredditName() string {
	if x != nil {
		return x.SubredditName
	}
	return ""
}

type AddDataSourceResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	SourceId      string                 `protobuf:"bytes,3,opt,name=source_id,json=sourceId,proto3" json:"source_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddDataSourceResponse) Reset() {
	*x = AddDataSourceResponse{}
	mi := &file_reddit_parser_reddit_parser_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddDataSourceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDataSourceResponse) ProtoMessage() {}

func (x *AddDataSourceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_reddit_parser_reddit_parser_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDataSourceResponse.ProtoReflect.Descriptor instead.
func (*AddDataSourceResponse) Descriptor() ([]byte, []int) {
	return file_reddit_parser_reddit_parser_proto_rawDescGZIP(), []int{1}
}

func (x *AddDataSourceResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *AddDataSourceResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *AddDataSourceResponse) GetSourceId() string {
	if x != nil {
		return x.SourceId
	}
	return ""
}

var File_reddit_parser_reddit_parser_proto protoreflect.FileDescriptor

var file_reddit_parser_reddit_parser_proto_rawDesc = string([]byte{
	0x0a, 0x21, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x2d, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2f,
	0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x2d, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x73,
	0x65, 0x72, 0x22, 0x3d, 0x0a, 0x14, 0x41, 0x64, 0x64, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x75,
	0x62, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x68, 0x0a, 0x15, 0x41, 0x64, 0x64, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x2a, 0x27, 0x0a, 0x06, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x00, 0x12,
	0x13, 0x0a, 0x0f, 0x41, 0x44, 0x44, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x10, 0x01, 0x32, 0x71, 0x0a, 0x13, 0x52, 0x65, 0x64, 0x64, 0x69, 0x74, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x5a, 0x0a, 0x0d, 0x41,
	0x64, 0x64, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x23, 0x2e, 0x72,
	0x65, 0x64, 0x64, 0x69, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64,
	0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x24, 0x2e, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x73, 0x65,
	0x72, 0x2e, 0x41, 0x64, 0x64, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x20, 0x5a, 0x1e, 0x78, 0x33, 0x61, 0x2e, 0x72,
	0x65, 0x64, 0x64, 0x69, 0x74, 0x2d, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x3b, 0x72, 0x65, 0x64,
	0x64, 0x69, 0x74, 0x70, 0x61, 0x72, 0x73, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
})

var (
	file_reddit_parser_reddit_parser_proto_rawDescOnce sync.Once
	file_reddit_parser_reddit_parser_proto_rawDescData []byte
)

func file_reddit_parser_reddit_parser_proto_rawDescGZIP() []byte {
	file_reddit_parser_reddit_parser_proto_rawDescOnce.Do(func() {
		file_reddit_parser_reddit_parser_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_reddit_parser_reddit_parser_proto_rawDesc), len(file_reddit_parser_reddit_parser_proto_rawDesc)))
	})
	return file_reddit_parser_reddit_parser_proto_rawDescData
}

var file_reddit_parser_reddit_parser_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_reddit_parser_reddit_parser_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_reddit_parser_reddit_parser_proto_goTypes = []any{
	(Method)(0),                   // 0: reddit_parser.Method
	(*AddDataSourceRequest)(nil),  // 1: reddit_parser.AddDataSourceRequest
	(*AddDataSourceResponse)(nil), // 2: reddit_parser.AddDataSourceResponse
}
var file_reddit_parser_reddit_parser_proto_depIdxs = []int32{
	1, // 0: reddit_parser.RedditSourceManager.AddDataSource:input_type -> reddit_parser.AddDataSourceRequest
	2, // 1: reddit_parser.RedditSourceManager.AddDataSource:output_type -> reddit_parser.AddDataSourceResponse
	1, // [1:2] is the sub-list for method output_type
	0, // [0:1] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_reddit_parser_reddit_parser_proto_init() }
func file_reddit_parser_reddit_parser_proto_init() {
	if File_reddit_parser_reddit_parser_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_reddit_parser_reddit_parser_proto_rawDesc), len(file_reddit_parser_reddit_parser_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_reddit_parser_reddit_parser_proto_goTypes,
		DependencyIndexes: file_reddit_parser_reddit_parser_proto_depIdxs,
		EnumInfos:         file_reddit_parser_reddit_parser_proto_enumTypes,
		MessageInfos:      file_reddit_parser_reddit_parser_proto_msgTypes,
	}.Build()
	File_reddit_parser_reddit_parser_proto = out.File
	file_reddit_parser_reddit_parser_proto_goTypes = nil
	file_reddit_parser_reddit_parser_proto_depIdxs = nil
}
