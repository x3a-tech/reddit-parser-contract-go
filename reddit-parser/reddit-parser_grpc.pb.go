// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.24.4
// source: reddit-parser/reddit-parser.proto

package redditparsv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RedditSourceManager_AddDataSource_FullMethodName   = "/reddit_parser.RedditSourceManager/AddDataSource"
	RedditSourceManager_ListDataSources_FullMethodName = "/reddit_parser.RedditSourceManager/ListDataSources"
)

// RedditSourceManagerClient is the client API for RedditSourceManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RedditSourceManagerClient interface {
	AddDataSource(ctx context.Context, in *AddDataSourceRequest, opts ...grpc.CallOption) (*AddDataSourceResponse, error)
	ListDataSources(ctx context.Context, in *ListDataSourcesRequest, opts ...grpc.CallOption) (*ListDataSourcesResponse, error)
}

type redditSourceManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewRedditSourceManagerClient(cc grpc.ClientConnInterface) RedditSourceManagerClient {
	return &redditSourceManagerClient{cc}
}

func (c *redditSourceManagerClient) AddDataSource(ctx context.Context, in *AddDataSourceRequest, opts ...grpc.CallOption) (*AddDataSourceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddDataSourceResponse)
	err := c.cc.Invoke(ctx, RedditSourceManager_AddDataSource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redditSourceManagerClient) ListDataSources(ctx context.Context, in *ListDataSourcesRequest, opts ...grpc.CallOption) (*ListDataSourcesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDataSourcesResponse)
	err := c.cc.Invoke(ctx, RedditSourceManager_ListDataSources_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RedditSourceManagerServer is the server API for RedditSourceManager service.
// All implementations must embed UnimplementedRedditSourceManagerServer
// for forward compatibility.
type RedditSourceManagerServer interface {
	AddDataSource(context.Context, *AddDataSourceRequest) (*AddDataSourceResponse, error)
	ListDataSources(context.Context, *ListDataSourcesRequest) (*ListDataSourcesResponse, error)
	mustEmbedUnimplementedRedditSourceManagerServer()
}

// UnimplementedRedditSourceManagerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRedditSourceManagerServer struct{}

func (UnimplementedRedditSourceManagerServer) AddDataSource(context.Context, *AddDataSourceRequest) (*AddDataSourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDataSource not implemented")
}
func (UnimplementedRedditSourceManagerServer) ListDataSources(context.Context, *ListDataSourcesRequest) (*ListDataSourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDataSources not implemented")
}
func (UnimplementedRedditSourceManagerServer) mustEmbedUnimplementedRedditSourceManagerServer() {}
func (UnimplementedRedditSourceManagerServer) testEmbeddedByValue()                             {}

// UnsafeRedditSourceManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RedditSourceManagerServer will
// result in compilation errors.
type UnsafeRedditSourceManagerServer interface {
	mustEmbedUnimplementedRedditSourceManagerServer()
}

func RegisterRedditSourceManagerServer(s grpc.ServiceRegistrar, srv RedditSourceManagerServer) {
	// If the following call pancis, it indicates UnimplementedRedditSourceManagerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RedditSourceManager_ServiceDesc, srv)
}

func _RedditSourceManager_AddDataSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDataSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedditSourceManagerServer).AddDataSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RedditSourceManager_AddDataSource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedditSourceManagerServer).AddDataSource(ctx, req.(*AddDataSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RedditSourceManager_ListDataSources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDataSourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedditSourceManagerServer).ListDataSources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RedditSourceManager_ListDataSources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedditSourceManagerServer).ListDataSources(ctx, req.(*ListDataSourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RedditSourceManager_ServiceDesc is the grpc.ServiceDesc for RedditSourceManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RedditSourceManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "reddit_parser.RedditSourceManager",
	HandlerType: (*RedditSourceManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddDataSource",
			Handler:    _RedditSourceManager_AddDataSource_Handler,
		},
		{
			MethodName: "ListDataSources",
			Handler:    _RedditSourceManager_ListDataSources_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "reddit-parser/reddit-parser.proto",
}
